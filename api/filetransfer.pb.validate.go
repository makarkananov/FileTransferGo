// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: filetransfer.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FileListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FileListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileListRequestMultiError, or nil if none found.
func (m *FileListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FileListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FileListRequestMultiError(errors)
	}

	return nil
}

// FileListRequestMultiError is an error wrapping multiple validation errors
// returned by FileListRequest.ValidateAll() if the designated constraints
// aren't met.
type FileListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileListRequestMultiError) AllErrors() []error { return m }

// FileListRequestValidationError is the validation error returned by
// FileListRequest.Validate if the designated constraints aren't met.
type FileListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileListRequestValidationError) ErrorName() string { return "FileListRequestValidationError" }

// Error satisfies the builtin error interface
func (e FileListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileListRequestValidationError{}

// Validate checks the field values on FileListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FileListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileListResponseMultiError, or nil if none found.
func (m *FileListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FileListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) < 1 {
			err := FileListResponseValidationError{
				field:  fmt.Sprintf("Files[%v]", idx),
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return FileListResponseMultiError(errors)
	}

	return nil
}

// FileListResponseMultiError is an error wrapping multiple validation errors
// returned by FileListResponse.ValidateAll() if the designated constraints
// aren't met.
type FileListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileListResponseMultiError) AllErrors() []error { return m }

// FileListResponseValidationError is the validation error returned by
// FileListResponse.Validate if the designated constraints aren't met.
type FileListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileListResponseValidationError) ErrorName() string { return "FileListResponseValidationError" }

// Error satisfies the builtin error interface
func (e FileListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileListResponseValidationError{}

// Validate checks the field values on FileInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FileInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileInfoRequestMultiError, or nil if none found.
func (m *FileInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FileInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFilename()) < 1 {
		err := FileInfoRequestValidationError{
			field:  "Filename",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FileInfoRequestMultiError(errors)
	}

	return nil
}

// FileInfoRequestMultiError is an error wrapping multiple validation errors
// returned by FileInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type FileInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileInfoRequestMultiError) AllErrors() []error { return m }

// FileInfoRequestValidationError is the validation error returned by
// FileInfoRequest.Validate if the designated constraints aren't met.
type FileInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileInfoRequestValidationError) ErrorName() string { return "FileInfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e FileInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileInfoRequestValidationError{}

// Validate checks the field values on FileInfoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FileInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileInfoResponseMultiError, or nil if none found.
func (m *FileInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FileInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFilename()) < 1 {
		err := FileInfoResponseValidationError{
			field:  "Filename",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Size

	if len(errors) > 0 {
		return FileInfoResponseMultiError(errors)
	}

	return nil
}

// FileInfoResponseMultiError is an error wrapping multiple validation errors
// returned by FileInfoResponse.ValidateAll() if the designated constraints
// aren't met.
type FileInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileInfoResponseMultiError) AllErrors() []error { return m }

// FileInfoResponseValidationError is the validation error returned by
// FileInfoResponse.Validate if the designated constraints aren't met.
type FileInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileInfoResponseValidationError) ErrorName() string { return "FileInfoResponseValidationError" }

// Error satisfies the builtin error interface
func (e FileInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileInfoResponseValidationError{}

// Validate checks the field values on FileContentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileContentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileContentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileContentResponseMultiError, or nil if none found.
func (m *FileContentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FileContentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFilename()) < 1 {
		err := FileContentResponseValidationError{
			field:  "Filename",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Content

	if len(errors) > 0 {
		return FileContentResponseMultiError(errors)
	}

	return nil
}

// FileContentResponseMultiError is an error wrapping multiple validation
// errors returned by FileContentResponse.ValidateAll() if the designated
// constraints aren't met.
type FileContentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileContentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileContentResponseMultiError) AllErrors() []error { return m }

// FileContentResponseValidationError is the validation error returned by
// FileContentResponse.Validate if the designated constraints aren't met.
type FileContentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileContentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileContentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileContentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileContentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileContentResponseValidationError) ErrorName() string {
	return "FileContentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FileContentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileContentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileContentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileContentResponseValidationError{}
