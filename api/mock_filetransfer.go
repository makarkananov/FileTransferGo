// Code generated by MockGen. DO NOT EDIT.
// Source: filetransfer/api (interfaces: FileTransferClient)
//
// Generated by this command:
//
//	mockgen.exe . FileTransferClient
//
// Package mock_api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFileTransferClient is a mock of FileTransferClient interface.
type MockFileTransferClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileTransferClientMockRecorder
}

// MockFileTransferClientMockRecorder is the mock recorder for MockFileTransferClient.
type MockFileTransferClientMockRecorder struct {
	mock *MockFileTransferClient
}

// NewMockFileTransferClient creates a new mock instance.
func NewMockFileTransferClient(ctrl *gomock.Controller) *MockFileTransferClient {
	mock := &MockFileTransferClient{ctrl: ctrl}
	mock.recorder = &MockFileTransferClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileTransferClient) EXPECT() *MockFileTransferClientMockRecorder {
	return m.recorder
}

// GetFileContent mocks base method.
func (m *MockFileTransferClient) GetFileContent(arg0 context.Context, arg1 *FileInfoRequest, arg2 ...grpc.CallOption) (*FileContentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFileContent", varargs...)
	ret0, _ := ret[0].(*FileContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileContent indicates an expected call of GetFileContent.
func (mr *MockFileTransferClientMockRecorder) GetFileContent(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileContent", reflect.TypeOf((*MockFileTransferClient)(nil).GetFileContent), varargs...)
}

// GetFileInfo mocks base method.
func (m *MockFileTransferClient) GetFileInfo(arg0 context.Context, arg1 *FileInfoRequest, arg2 ...grpc.CallOption) (*FileInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFileInfo", varargs...)
	ret0, _ := ret[0].(*FileInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo.
func (mr *MockFileTransferClientMockRecorder) GetFileInfo(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockFileTransferClient)(nil).GetFileInfo), varargs...)
}

// GetFileList mocks base method.
func (m *MockFileTransferClient) GetFileList(arg0 context.Context, arg1 *FileListRequest, arg2 ...grpc.CallOption) (*FileListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFileList", varargs...)
	ret0, _ := ret[0].(*FileListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileList indicates an expected call of GetFileList.
func (mr *MockFileTransferClientMockRecorder) GetFileList(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileList", reflect.TypeOf((*MockFileTransferClient)(nil).GetFileList), varargs...)
}
