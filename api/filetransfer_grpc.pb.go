// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: filetransfer.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileTransfer_GetFileList_FullMethodName    = "/api.FileTransfer/GetFileList"
	FileTransfer_GetFileInfo_FullMethodName    = "/api.FileTransfer/GetFileInfo"
	FileTransfer_GetFileContent_FullMethodName = "/api.FileTransfer/GetFileContent"
)

// FileTransferClient is the client API for FileTransfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileTransferClient interface {
	GetFileList(ctx context.Context, in *FileListRequest, opts ...grpc.CallOption) (*FileListResponse, error)
	GetFileInfo(ctx context.Context, in *FileInfoRequest, opts ...grpc.CallOption) (*FileInfoResponse, error)
	GetFileContent(ctx context.Context, in *FileInfoRequest, opts ...grpc.CallOption) (*FileContentResponse, error)
}

type fileTransferClient struct {
	cc grpc.ClientConnInterface
}

func NewFileTransferClient(cc grpc.ClientConnInterface) FileTransferClient {
	return &fileTransferClient{cc}
}

func (c *fileTransferClient) GetFileList(ctx context.Context, in *FileListRequest, opts ...grpc.CallOption) (*FileListResponse, error) {
	out := new(FileListResponse)
	err := c.cc.Invoke(ctx, FileTransfer_GetFileList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferClient) GetFileInfo(ctx context.Context, in *FileInfoRequest, opts ...grpc.CallOption) (*FileInfoResponse, error) {
	out := new(FileInfoResponse)
	err := c.cc.Invoke(ctx, FileTransfer_GetFileInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferClient) GetFileContent(ctx context.Context, in *FileInfoRequest, opts ...grpc.CallOption) (*FileContentResponse, error) {
	out := new(FileContentResponse)
	err := c.cc.Invoke(ctx, FileTransfer_GetFileContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileTransferServer is the server API for FileTransfer service.
// All implementations must embed UnimplementedFileTransferServer
// for forward compatibility
type FileTransferServer interface {
	GetFileList(context.Context, *FileListRequest) (*FileListResponse, error)
	GetFileInfo(context.Context, *FileInfoRequest) (*FileInfoResponse, error)
	GetFileContent(context.Context, *FileInfoRequest) (*FileContentResponse, error)
	mustEmbedUnimplementedFileTransferServer()
}

// UnimplementedFileTransferServer must be embedded to have forward compatible implementations.
type UnimplementedFileTransferServer struct {
}

func (UnimplementedFileTransferServer) GetFileList(context.Context, *FileListRequest) (*FileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileList not implemented")
}
func (UnimplementedFileTransferServer) GetFileInfo(context.Context, *FileInfoRequest) (*FileInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfo not implemented")
}
func (UnimplementedFileTransferServer) GetFileContent(context.Context, *FileInfoRequest) (*FileContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileContent not implemented")
}
func (UnimplementedFileTransferServer) mustEmbedUnimplementedFileTransferServer() {}

// UnsafeFileTransferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileTransferServer will
// result in compilation errors.
type UnsafeFileTransferServer interface {
	mustEmbedUnimplementedFileTransferServer()
}

func RegisterFileTransferServer(s grpc.ServiceRegistrar, srv FileTransferServer) {
	s.RegisterService(&FileTransfer_ServiceDesc, srv)
}

func _FileTransfer_GetFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServer).GetFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransfer_GetFileList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServer).GetFileList(ctx, req.(*FileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransfer_GetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServer).GetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransfer_GetFileInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServer).GetFileInfo(ctx, req.(*FileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransfer_GetFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServer).GetFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransfer_GetFileContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServer).GetFileContent(ctx, req.(*FileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileTransfer_ServiceDesc is the grpc.ServiceDesc for FileTransfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileTransfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.FileTransfer",
	HandlerType: (*FileTransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileList",
			Handler:    _FileTransfer_GetFileList_Handler,
		},
		{
			MethodName: "GetFileInfo",
			Handler:    _FileTransfer_GetFileInfo_Handler,
		},
		{
			MethodName: "GetFileContent",
			Handler:    _FileTransfer_GetFileContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filetransfer.proto",
}
