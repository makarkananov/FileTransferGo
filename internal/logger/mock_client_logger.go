// Code generated by MockGen. DO NOT EDIT.
// Source: ./client_logger.go
//
// Generated by this command:
//
//	mockgen.exe -source ./client_logger.go -destination ./mock_client_logger.go -package xxx
//
// Package xxx is a generated GoMock package.
package logger

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClientLogger is a mock of ClientLogger interface.
type MockClientLogger struct {
	ctrl     *gomock.Controller
	recorder *MockClientLoggerMockRecorder
}

// MockClientLoggerMockRecorder is the mock recorder for MockClientLogger.
type MockClientLoggerMockRecorder struct {
	mock *MockClientLogger
}

// NewMockClientLogger creates a new mock instance.
func NewMockClientLogger(ctrl *gomock.Controller) *MockClientLogger {
	mock := &MockClientLogger{ctrl: ctrl}
	mock.recorder = &MockClientLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientLogger) EXPECT() *MockClientLoggerMockRecorder {
	return m.recorder
}

// Printf mocks base method.
func (m *MockClientLogger) Printf(format string, v ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf.
func (mr *MockClientLoggerMockRecorder) Printf(format any, v ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockClientLogger)(nil).Printf), varargs...)
}
