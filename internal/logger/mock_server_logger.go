// Code generated by MockGen. DO NOT EDIT.
// Source: ./server_logger.go
//
// Generated by this command:
//
//	mockgen.exe -source ./server_logger.go -destination ./mock_server_logger.go -package logger
//
// Package logger is a generated GoMock package.
package logger

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServerLogger is a mock of ServerLogger interface.
type MockServerLogger struct {
	ctrl     *gomock.Controller
	recorder *MockServerLoggerMockRecorder
}

// MockServerLoggerMockRecorder is the mock recorder for MockServerLogger.
type MockServerLoggerMockRecorder struct {
	mock *MockServerLogger
}

// NewMockServerLogger creates a new mock instance.
func NewMockServerLogger(ctrl *gomock.Controller) *MockServerLogger {
	mock := &MockServerLogger{ctrl: ctrl}
	mock.recorder = &MockServerLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerLogger) EXPECT() *MockServerLoggerMockRecorder {
	return m.recorder
}

// Printf mocks base method.
func (m *MockServerLogger) Printf(format string, v ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf.
func (mr *MockServerLoggerMockRecorder) Printf(format any, v ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockServerLogger)(nil).Printf), varargs...)
}
